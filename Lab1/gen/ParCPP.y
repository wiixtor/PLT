-- This Happy file was machine-generated by the BNF converter
{
{-# OPTIONS_GHC -fno-warn-incomplete-patterns -fno-warn-overlapping-patterns #-}
module ParCPP where
import AbsCPP
import LexCPP
import ErrM

}

%name pProgram Program
%name pListDef ListDef
%name pDef Def
%name pDecs Decs
%name pListStm ListStm
%name pListArg ListArg
%name pListDecs ListDecs
%name pBody Body
%name pArg Arg
%name pStm Stm
%name pListId ListId
%name pElse Else
%name pExp16 Exp16
%name pExp15 Exp15
%name pExp14 Exp14
%name pExp13 Exp13
%name pExp12 Exp12
%name pExp11 Exp11
%name pExp10 Exp10
%name pExp9 Exp9
%name pExp8 Exp8
%name pExp4 Exp4
%name pExp3 Exp3
%name pExp2 Exp2
%name pExp Exp
%name pExp1 Exp1
%name pExp5 Exp5
%name pExp6 Exp6
%name pExp7 Exp7
%name pListExp ListExp
%name pListName ListName
%name pName Name
%name pLiteral Literal
%name pListString ListString
%name pType2 Type2
%name pType1 Type1
%name pType Type
%name pTArg TArg
%name pBoole Boole

-- no lexer declaration
%monad { Err } { thenM } { returnM }
%tokentype { Token }

%token 
 '!' { PT _ (TS _ 1) }
 '!=' { PT _ (TS _ 2) }
 '%' { PT _ (TS _ 3) }
 '&' { PT _ (TS _ 4) }
 '&&' { PT _ (TS _ 5) }
 '(' { PT _ (TS _ 6) }
 ')' { PT _ (TS _ 7) }
 '*' { PT _ (TS _ 8) }
 '+' { PT _ (TS _ 9) }
 '++' { PT _ (TS _ 10) }
 '+=' { PT _ (TS _ 11) }
 ',' { PT _ (TS _ 12) }
 '-' { PT _ (TS _ 13) }
 '--' { PT _ (TS _ 14) }
 '-=' { PT _ (TS _ 15) }
 '->' { PT _ (TS _ 16) }
 '.' { PT _ (TS _ 17) }
 '/' { PT _ (TS _ 18) }
 ':' { PT _ (TS _ 19) }
 '::' { PT _ (TS _ 20) }
 ';' { PT _ (TS _ 21) }
 '<' { PT _ (TS _ 22) }
 '<<' { PT _ (TS _ 23) }
 '<=' { PT _ (TS _ 24) }
 '=' { PT _ (TS _ 25) }
 '==' { PT _ (TS _ 26) }
 '>' { PT _ (TS _ 27) }
 '>=' { PT _ (TS _ 28) }
 '>>' { PT _ (TS _ 29) }
 '?' { PT _ (TS _ 30) }
 '[' { PT _ (TS _ 31) }
 ']' { PT _ (TS _ 32) }
 'const' { PT _ (TS _ 33) }
 'do' { PT _ (TS _ 34) }
 'double' { PT _ (TS _ 35) }
 'else' { PT _ (TS _ 36) }
 'false' { PT _ (TS _ 37) }
 'for' { PT _ (TS _ 38) }
 'if' { PT _ (TS _ 39) }
 'inline' { PT _ (TS _ 40) }
 'int' { PT _ (TS _ 41) }
 'return' { PT _ (TS _ 42) }
 'string' { PT _ (TS _ 43) }
 'struct' { PT _ (TS _ 44) }
 'throw' { PT _ (TS _ 45) }
 'true' { PT _ (TS _ 46) }
 'typedef' { PT _ (TS _ 47) }
 'using' { PT _ (TS _ 48) }
 'void' { PT _ (TS _ 49) }
 'while' { PT _ (TS _ 50) }
 '{' { PT _ (TS _ 51) }
 '||' { PT _ (TS _ 52) }
 '}' { PT _ (TS _ 53) }

L_integ  { PT _ (TI $$) }
L_charac { PT _ (TC $$) }
L_doubl  { PT _ (TD $$) }
L_quoted { PT _ (TL $$) }
L_Id { PT _ (T_Id $$) }
L_err    { _ }


%%

Integer :: { Integer } : L_integ  { (read ( $1)) :: Integer }
Char    :: { Char }    : L_charac { (read ( $1)) :: Char }
Double  :: { Double }  : L_doubl  { (read ( $1)) :: Double }
String  :: { String }  : L_quoted {  $1 }
Id    :: { Id} : L_Id { Id ($1)}

Program :: { Program }
Program : ListDef { PDefs (reverse $1) } 


ListDef :: { [Def] }
ListDef : {- empty -} { [] } 
  | ListDef Def { flip (:) $1 $2 }


Def :: { Def }
Def : Type Id '(' ListArg ')' Body { DFun $1 $2 $4 $6 } 
  | 'inline' Type Id '(' ListArg ')' Body { DFunIn $2 $3 $5 $7 }
  | 'typedef' Type Id ';' { DType $2 $3 }
  | Type ListId '=' Exp ';' { DInit $1 $2 $4 }
  | Type ListId ';' { DDEc $1 $2 }
  | 'using' ListName ';' { DUsing $2 }
  | 'struct' Id '{' ListDecs '}' ';' { DStruc $2 (reverse $4) }


Decs :: { Decs }
Decs : Type ListId { Dec $1 $2 } 


ListStm :: { [Stm] }
ListStm : {- empty -} { [] } 
  | Stm ListStm { (:) $1 $2 }
  | {- empty -} { [] }
  | Stm ListStm { (:) $1 $2 }


ListArg :: { [Arg] }
ListArg : {- empty -} { [] } 
  | Arg { (:[]) $1 }
  | Arg ',' ListArg { (:) $1 $3 }


ListDecs :: { [Decs] }
ListDecs : {- empty -} { [] } 
  | ListDecs Decs ';' { flip (:) $1 $2 }


Body :: { Body }
Body : ';' { EBody } 
  | '{' ListStm '}' { FBody $2 }


Arg :: { Arg }
Arg : Type { TArg $1 } 
  | Type Id { IdArg $1 $2 }
  | Type Id '=' Exp { DArg $1 $2 $4 }
  | 'const' Arg { CArg $2 }


Stm :: { Stm }
Stm : Exp ';' { SExp $1 } 
  | Type ListId ';' { SDecl $1 $2 }
  | Type ListId '=' Exp ';' { SInit $1 $2 $4 }
  | 'const' Type ListId '=' Exp ';' { SConst $2 $3 $5 }
  | 'return' Exp ';' { SReturn $2 }
  | 'while' '(' Exp ')' Stm { SWhile $3 $5 }
  | 'do' Stm 'while' '(' Exp ')' ';' { SDo $2 $5 }
  | 'for' '(' Stm Stm Exp ')' Stm { SFor $3 $4 $5 $7 }
  | 'if' '(' Exp ')' Stm Else { SIf $3 $5 $6 }
  | 'typedef' Type Id ';' { STypeD $2 $3 }
  | '{' ListStm '}' { SBlock $2 }


ListId :: { [Id] }
ListId : Id { (:[]) $1 } 
  | Id ',' ListId { (:) $1 $3 }


Else :: { Else }
Else : 'else' Stm { RElse $2 } 
  | {- empty -} { REmpty }


Exp16 :: { Exp }
Exp16 : Literal { ELiteral $1 } 
  | ListName { EQConst $1 }
  | '(' Exp ')' { $2 }


Exp15 :: { Exp }
Exp15 : Exp15 '[' Exp ']' { EIndex $1 $3 } 
  | Exp16 '(' ListExp ')' { EFunc $1 $3 }
  | Exp16 { $1 }


Exp14 :: { Exp }
Exp14 : Exp14 '.' Exp15 { EDot $1 $3 } 
  | Exp14 '->' Exp15 { EArrow $1 $3 }
  | Exp14 '++' { EIncR $1 }
  | Exp14 '--' { EDecR $1 }
  | Exp15 { $1 }


Exp13 :: { Exp }
Exp13 : '++' Exp13 { EIncL $2 } 
  | '--' Exp13 { EDecL $2 }
  | '*' Exp13 { EDefr $2 }
  | '!' Exp13 { ENeg $2 }
  | Exp14 { $1 }


Exp12 :: { Exp }
Exp12 : Exp12 '*' Exp13 { EMul $1 $3 } 
  | Exp12 '/' Exp13 { EDiv $1 $3 }
  | Exp12 '%' Exp13 { ERem $1 $3 }
  | Exp13 { $1 }


Exp11 :: { Exp }
Exp11 : Exp11 '+' Exp12 { EAdd $1 $3 } 
  | Exp11 '-' Exp12 { ESub $1 $3 }
  | Exp12 { $1 }


Exp10 :: { Exp }
Exp10 : Exp10 '<<' Exp11 { ELShift $1 $3 } 
  | Exp10 '>>' Exp11 { ERShift $1 $3 }
  | Exp11 { $1 }


Exp9 :: { Exp }
Exp9 : Exp9 '<' Exp9 { ELesser $1 $3 } 
  | Exp9 '>' Exp9 { EGreater $1 $3 }
  | Exp9 '<=' Exp9 { ELesserE $1 $3 }
  | Exp9 '>=' Exp9 { EGreatE $1 $3 }
  | Exp10 { $1 }


Exp8 :: { Exp }
Exp8 : Exp8 '==' Exp8 { EEquals $1 $3 } 
  | Exp8 '!=' Exp8 { EInEqual $1 $3 }
  | Exp9 { $1 }


Exp4 :: { Exp }
Exp4 : Exp4 '&&' Exp5 { EConj $1 $3 } 
  | Exp5 { $1 }


Exp3 :: { Exp }
Exp3 : Exp3 '||' Exp4 { EDisj $1 $3 } 
  | Exp4 { $1 }


Exp2 :: { Exp }
Exp2 : Exp3 '=' Exp2 { EAss $1 $3 } 
  | Exp3 '+=' Exp2 { EAddAss $1 $3 }
  | Exp3 '-=' Exp2 { ESubAss $1 $3 }
  | Exp3 '?' Exp2 ':' Exp2 { ECond $1 $3 $5 }
  | Exp3 { $1 }


Exp :: { Exp }
Exp : 'throw' Exp2 { EExept $2 } 
  | Exp1 { $1 }


Exp1 :: { Exp }
Exp1 : Exp2 { $1 } 


Exp5 :: { Exp }
Exp5 : Exp6 { $1 } 


Exp6 :: { Exp }
Exp6 : Exp7 { $1 } 


Exp7 :: { Exp }
Exp7 : Exp8 { $1 } 


ListExp :: { [Exp] }
ListExp : {- empty -} { [] } 
  | Exp { (:[]) $1 }
  | Exp ',' ListExp { (:) $1 $3 }


ListName :: { [Name] }
ListName : Name { (:[]) $1 } 
  | Name '::' ListName { (:) $1 $3 }


Name :: { Name }
Name : Id { IdName $1 } 
  | Type2 { TypeName $1 }


Literal :: { Literal }
Literal : Integer { IntL $1 } 
  | ListString { StringL $1 }
  | Char { CharL $1 }
  | Double { FloatL $1 }
  | Id { IdentL $1 }


ListString :: { [String] }
ListString : String { (:[]) $1 } 
  | String ListString { (:) $1 $2 }


Type2 :: { Type }
Type2 : 'string' { TString } 
  | 'int' { TInt }
  | 'double' { TDouble }
  | Id '<' TArg '>' { TTemplate $1 $3 }
  | 'void' { TVoid }
  | Boole { TBool $1 }
  | '(' Type ')' { $2 }


Type1 :: { Type }
Type1 : ListName { TQConst $1 } 
  | Type2 { $1 }


Type :: { Type }
Type : Type1 '&' { TRef $1 } 
  | Type1 { $1 }


TArg :: { TArg }
TArg : Type1 { TArgT $1 } 
  | Type1 ',' Id { TArgM $1 $3 }


Boole :: { Boole }
Boole : 'true' { BTrue } 
  | 'false' { BFalse }



{

returnM :: a -> Err a
returnM = return

thenM :: Err a -> (a -> Err b) -> Err b
thenM = (>>=)

happyError :: [Token] -> Err a
happyError ts =
  Bad $ "syntax error at " ++ tokenPos ts ++ 
  case ts of
    [] -> []
    [Err _] -> " due to lexer error"
    _ -> " before " ++ unwords (map (id . prToken) (take 4 ts))

myLexer = tokens
}

