module AbsCPP where

-- Haskell module generated by the BNF converter


newtype Id = Id String deriving (Eq,Ord,Show)
newtype IdT = IdT String deriving (Eq,Ord,Show)
data Program =
   PDefs [Def]
  deriving (Eq,Ord,Show)

data Def =
   DFun Type Id [Arg] [Stm]
  deriving (Eq,Ord,Show)

data Arg =
   TArg Type
 | IdArg Type Id
 | DArg Type Id Exp
 | CArg Arg
  deriving (Eq,Ord,Show)

data Stm =
   SExp Exp
 | SDec Type [Id] Exp
 | SReturn Exp
 | SWhile Exp Stm
 | SDo Stm Exp
 | SFor Stm Exp Exp Stm
 | SIf Exp Stm
  deriving (Eq,Ord,Show)

data Exp =
   EInt Integer
 | EString String
 | EQConst IdT [IdT]
 | ELShift Exp Exp
  deriving (Eq,Ord,Show)

data Type =
   TInt Integer
  deriving (Eq,Ord,Show)

