module AbsCPP where

-- Haskell module generated by the BNF converter


newtype Id = Id String deriving (Eq,Ord,Show)
data Program =
   PDefs [Def]
  deriving (Eq,Ord,Show)

data Def =
   DFun Type Id [Arg] Body
 | DFunIn Type Id [Arg] Body
 | DType Type Id
 | DDecInit Dec
 | DUsing QConst
 | DStruc Id [Dec]
  deriving (Eq,Ord,Show)

data Dec =
   NormalDec Type [Id]
 | NormalInit Type [Id] Exp
  deriving (Eq,Ord,Show)

data Body =
   EBody
 | FBody [Stm]
  deriving (Eq,Ord,Show)

data Arg =
   TArg Type
 | IdArg Type Id
 | DArg Type Id Exp
 | CArg Arg
  deriving (Eq,Ord,Show)

data Stm =
   SExp Exp
 | SDec Dec
 | SConst Dec
 | SReturn Exp
 | SWhile Exp Stm
 | SDo Stm Exp
 | SFor Dec Exp Exp Stm
 | SIf Exp Stm Else
 | STypeD Type Id
 | SBlock Body
 | SStruct Id [Dec]
  deriving (Eq,Ord,Show)

data Else =
   RElse Stm
 | REmpty
  deriving (Eq,Ord,Show)

data Exp =
   ELiteral Literal
 | EQConst QConst
 | EIndex Exp Exp
 | EFunc Exp [Exp]
 | EDot Exp Exp
 | EArrow Exp Exp
 | EIncR Exp
 | EDecR Exp
 | EIncL Exp
 | EDecL Exp
 | EDefr Exp
 | ENeg Exp
 | EMul Exp Exp
 | EDiv Exp Exp
 | ERem Exp Exp
 | EAdd Exp Exp
 | ESub Exp Exp
 | ELShift Exp Exp
 | ERShift Exp Exp
 | ELesser Exp Exp
 | EGreater Exp Exp
 | ELesserE Exp Exp
 | EGreatE Exp Exp
 | EEquals Exp Exp
 | EInEqual Exp Exp
 | EConj Exp Exp
 | EDisj Exp Exp
 | EAss Exp Exp
 | EAddAss Exp Exp
 | ESubAss Exp Exp
 | ECond Exp Exp Exp
 | EExept Exp
  deriving (Eq,Ord,Show)

data QConst =
   QConsts [Item]
  deriving (Eq,Ord,Show)

data Item =
   IdItem Id
 | TypeItem Id [Type]
  deriving (Eq,Ord,Show)

data Literal =
   LInt Integer
 | LString [String]
 | LChar Char
 | LFloat Double
  deriving (Eq,Ord,Show)

data Type =
   TInt
 | TDouble
 | TVoid
 | TBool
 | TQConst QConst
 | TRef Type
  deriving (Eq,Ord,Show)

