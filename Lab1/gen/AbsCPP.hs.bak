module AbsCPP where

-- Haskell module generated by the BNF converter


newtype Id = Id String deriving (Eq,Ord,Show)
data Program =
   PDefs [Def]
  deriving (Eq,Ord,Show)

data Def =
   DFun Type Id [Arg] Body
 | DFunIn Type Id [Arg] Body
 | DType Type Id
 | DInit Type [Id] Exp
 | DDEc Type [Id]
 | DStruc Id [Decs]
 | DUsing [Name]
  deriving (Eq,Ord,Show)

data Decs =
   Dec Type [Id]
  deriving (Eq,Ord,Show)

data Body =
   EBody
 | Body [Stm]
  deriving (Eq,Ord,Show)

data Arg =
   TArg Type
 | IdArg Type Id
 | DArg Type Id Exp
 | CArg Arg
  deriving (Eq,Ord,Show)

data Stm =
   SExp Exp
 | SDecl Type [Id]
 | SInit Type [Id] Exp
 | SConst Type [Id] Exp
 | SReturn Exp
 | SWhile Exp Stm
 | SDo Stm Exp
 | SFor Arg Exp Exp Stm
 | SIf Exp Stm Else
 | STypeD Type Id
 | SBlock [Stm]
  deriving (Eq,Ord,Show)

data Else =
   RElse Stm
 | REmpty
  deriving (Eq,Ord,Show)

data Exp =
   ELiteral Literal
 | EQConst [Name]
 | EIndex Exp Exp
 | EFunc Exp [Exp]
 | EDot Exp Exp
 | EArrow Exp Exp
 | EIncR Exp
 | EDecR Exp
 | EIncL Exp
 | EDecL Exp
 | EDefr Exp
 | ENeg Exp
 | EMul Exp Exp
 | EDiv Exp Exp
 | ERem Exp Exp
 | EAdd Exp Exp
 | ESub Exp Exp
 | ELShift Exp Exp
 | ERShift Exp Exp
 | ELesser Exp Exp
 | EGreater Exp Exp
 | ELesserE Exp Exp
 | EGreatE Exp Exp
 | EEquals Exp Exp
 | EInEqual Exp Exp
 | EConj Exp Exp
 | EDisj Exp Exp
 | EAss Exp Exp
 | EAddAss Exp Exp
 | ESubAss Exp Exp
 | ECond Exp Exp Exp
 | EExept Exp
  deriving (Eq,Ord,Show)

data Name =
   IdName Id
 | TypeName Type
  deriving (Eq,Ord,Show)

data Literal =
   IntL Integer
 | StringL [String]
 | CharL Char
 | FloatL Double
 | IdentL Id
  deriving (Eq,Ord,Show)

data Type =
   TString
 | TInt
 | TDouble
 | TTemplate Id TArg
 | TQConst [Name]
 | TVoid
 | TBool Boole
 | TRef Type
  deriving (Eq,Ord,Show)

data TArg =
   TArgT Type
 | TArgM Type Id
  deriving (Eq,Ord,Show)

data Boole =
   BTrue
 | BFalse
  deriving (Eq,Ord,Show)

