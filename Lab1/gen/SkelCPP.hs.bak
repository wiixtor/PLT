module SkelCPP where

-- Haskell module generated by the BNF converter

import AbsCPP
import ErrM
type Result = Err String

failure :: Show a => a -> Result
failure x = Bad $ "Undefined case: " ++ show x

transId :: Id -> Result
transId x = case x of
  Id str  -> failure x


transProgram :: Program -> Result
transProgram x = case x of
  PDefs defs  -> failure x


transDef :: Def -> Result
transDef x = case x of
  DFun type' id args body  -> failure x
  DFunIn type' id args body  -> failure x
  DType type' id  -> failure x
  DDecInit dec  -> failure x
  DUsing qconst  -> failure x
  DStruc id decs  -> failure x


transDec :: Dec -> Result
transDec x = case x of
  NormalDec type' ids  -> failure x
  NormalInit type' ids exp  -> failure x


transBody :: Body -> Result
transBody x = case x of
  EBody  -> failure x
  FBody stms  -> failure x


transArg :: Arg -> Result
transArg x = case x of
  TArg type'  -> failure x
  IdArg type' id  -> failure x
  DArg type' id exp  -> failure x
  CArg arg  -> failure x


transStm :: Stm -> Result
transStm x = case x of
  SExp exp  -> failure x
  SDecInit dec  -> failure x
  SConst dec  -> failure x
  SReturn exp  -> failure x
  SWhile exp stm  -> failure x
  SDo stm exp  -> failure x
  SFor dec exp1 exp2 stm3  -> failure x
  SIf exp stm else'  -> failure x
  STypeD type' id  -> failure x
  SBlock body  -> failure x
  SStruct id decs  -> failure x


transElse :: Else -> Result
transElse x = case x of
  RElse stm  -> failure x
  REmpty  -> failure x


transExp :: Exp -> Result
transExp x = case x of
  ELiteral literal  -> failure x
  EQConst qconst  -> failure x
  EIndex exp1 exp2  -> failure x
  EFunc exp exps  -> failure x
  EDot exp1 exp2  -> failure x
  EArrow exp1 exp2  -> failure x
  EIncR exp  -> failure x
  EDecR exp  -> failure x
  EIncL exp  -> failure x
  EDecL exp  -> failure x
  EDefr exp  -> failure x
  ENeg exp  -> failure x
  EMul exp1 exp2  -> failure x
  EDiv exp1 exp2  -> failure x
  ERem exp1 exp2  -> failure x
  EAdd exp1 exp2  -> failure x
  ESub exp1 exp2  -> failure x
  ELShift exp1 exp2  -> failure x
  ERShift exp1 exp2  -> failure x
  ELesser exp1 exp2  -> failure x
  EGreater exp1 exp2  -> failure x
  ELesserE exp1 exp2  -> failure x
  EGreatE exp1 exp2  -> failure x
  EEquals exp1 exp2  -> failure x
  EInEqual exp1 exp2  -> failure x
  EConj exp1 exp2  -> failure x
  EDisj exp1 exp2  -> failure x
  EAss exp1 exp2  -> failure x
  EAddAss exp1 exp2  -> failure x
  ESubAss exp1 exp2  -> failure x
  ECond exp1 exp2 exp3  -> failure x
  EExept exp  -> failure x


transQConst :: QConst -> Result
transQConst x = case x of
  QConsts items  -> failure x


transItem :: Item -> Result
transItem x = case x of
  IdItem id  -> failure x
  TypeItem template  -> failure x


transTemplate :: Template -> Result
transTemplate x = case x of
  NormTemp id types  -> failure x


transLiteral :: Literal -> Result
transLiteral x = case x of
  IntL n  -> failure x
  StringL strs  -> failure x
  CharL c  -> failure x
  FloatL d  -> failure x


transType :: Type -> Result
transType x = case x of
  TInt  -> failure x
  TDouble  -> failure x
  TVoid  -> failure x
  TBool  -> failure x
  TQConst qconst  -> failure x
  TRef type'  -> failure x



