PDefs. Program ::= [Def] ;
terminator Def "" ;

comment "//" ;
comment "/*" "*/" ;
comment "#" ;

DFun. Def     ::= Type Id "(" [Arg] ")" Body ;
DFunIn. Def   ::= "inline" Type Id "(" [Arg] ")" Body ;
DType. Def    ::= "typedef" Type Id ";" ;
DDecInit. Def ::= Dec ";" ;
DUsing. Def   ::= "using" QConst ";" ;
DStruc. Def   ::= "struct" Id "{" [Dec1] "}" ";" ;

separator Arg "," ;
terminator Dec1 ";" ;

NormalDec. Dec1  ::= Type [Id] ;
NormalInit. Dec  ::= Type [Id] "=" Exp ;
coercions Dec 1 ;

EBody. Body ::= ";" ;
FBody. Body ::= "{" [Stm] "}" ;

TArg. Arg1   ::= Type ;
IdArg. Arg1  ::= Type Id ;
DArg. Arg1   ::= Type Id "=" Exp ;
CArg. Arg    ::= "const" Arg1 ;
coercions Arg 1 ;

SExp. Stm     ::= Exp ";" ;
SDec. Stm     ::= Dec ";" ;
SConst. Stm   ::= "const" Dec ";" ;
SReturn. Stm  ::= "return" Exp ";" ;
SWhile.  Stm  ::= "while" "(" Exp ")" Stm ;
SDo.     Stm  ::= "do" Stm "while" "(" Exp ")" ";" ;
SFor.    Stm  ::= "for" "(" Dec ";" Exp ";" Exp ")" Stm ;
SIf.     Stm  ::= "if" "(" Exp ")" Stm Else ;
STypeD.  Stm  ::= "typedef" Type Id ";" ;
SBlock.  Stm  ::= Body ;
SStruct. Stm  ::= "struct" Id "{" [Dec1] "}" ";" ;

separator nonempty Id "," ;
separator Stm "" ;

RElse. Else  ::=  "else" Stm ;
REmpty. Else ::= ;

ELiteral. Exp16 ::= Literal ;
EQConst.  Exp16 ::= QConst ;
EIndex.   Exp15 ::= Exp15 "[" Exp "]" ;
EFunc.    Exp15 ::= Exp16 "(" [Exp] ")" ;
EDot.     Exp14 ::= Exp14 "." Exp15 ;
EArrow.   Exp14 ::= Exp14 "->" Exp15 ;
EIncR.    Exp14 ::= Exp14 "++" ;
EDecR.    Exp14 ::= Exp14 "--" ;
EIncL.    Exp13 ::= "++" Exp13 ;
EDecL.    Exp13 ::= "--" Exp13 ;
EDefr.    Exp13 ::= "*" Exp13 ;
ENeg.     Exp13 ::= "!" Exp13 ;
EMul.     Exp12 ::= Exp12 "*" Exp13 ;
EDiv.     Exp12 ::= Exp12 "/" Exp13 ;
ERem.     Exp12 ::= Exp12 "%" Exp13 ;
EAdd.     Exp11 ::= Exp11 "+" Exp12 ;
ESub.     Exp11 ::= Exp11 "-" Exp12 ;
ELShift.  Exp10 ::= Exp10 "<<" Exp11 ;
ERShift.  Exp10 ::= Exp10 ">>" Exp11 ;
ELesser.  Exp9  ::= Exp10 "<" Exp10 ;
EGreater. Exp9  ::= Exp10 ">" Exp10 ;
ELesserE. Exp9  ::= Exp10 "<=" Exp10 ;
EGreatE.  Exp9  ::= Exp10 ">=" Exp10 ;
EEquals.  Exp8  ::= Exp9 "==" Exp9 ;
EInEqual. Exp8  ::= Exp9 "!=" Exp9 ;
EConj.    Exp4  ::= Exp4 "&&" Exp5 ;
EDisj.    Exp3  ::= Exp3 "||" Exp4 ;
EAss.     Exp2  ::= Exp3 "=" Exp2 ;
EAddAss.  Exp2  ::= Exp3 "+=" Exp2 ;
ESubAss.  Exp2  ::= Exp3 "-=" Exp2 ;
ECond.    Exp2  ::= Exp3 "?" Exp2 ":" Exp2 ;
EExept.   Exp   ::= "throw" Exp2 ;
coercions Exp 16 ;
separator Exp "," ;

QConsts. QConst ::= [Item] ;
IdItem. Item     ::= Id ;
TypeItem. Item   ::=  Id "<" [Type1] ">" ;

separator nonempty Type1 "," ;
separator nonempty Item "::" ;

LInt.    Literal ::= Integer ;
LString. Literal ::= [String] ;
LChar.   Literal ::= Char ;
LFloat.  Literal ::= Double ;

separator nonempty String "" ;

TInt. Type1       ::= "int" ;
TDouble. Type1    ::= "double" ;
TVoid. Type1      ::= "void" ;
TBool. Type1      ::= "bool" ;
TQConst. Type1    ::= QConst ;
TRef.  Type       ::= Type1 "&" ;

coercions Type 1 ;

token Id (letter (letter | digit | '_')*) ;
