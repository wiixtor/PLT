PDefs. Program ::= [Def] ;
terminator Def "" ;

comment "//" ;
comment "/*" "*/" ;
comment "#" ;

DFun. Def ::= Type Id "(" [Arg] ")" "{" [Stm] "}" ;
separator Arg "," ;
terminator Stm "" ;

TArg. Arg ::= Type ;
IdArg. Arg ::= Type Id ;
DArg. Arg ::= Type Id "=" Exp ;
CArg. Arg ::= "const" Arg ;

SExp. Stm ::= Exp ";" ;
SDec. Stm ::= Type [Id] "=" Exp ";" ;
separator nonempty Id "," ;

SReturn. Stm ::= "return" Exp ";" ;
SWhile. Stm ::= "while" "(" Exp ")" Stm ;
SDo. Stm ::= "do" Stm "while" "(" Exp ")" ";" ;
SFor. Stm ::= "for" "(" Stm ";" Exp ";" Exp ")" Stm ;
SIf. Stm ::= "if" "(" Exp ")" Stm ";" ;

EInt. Exp     ::= Integer ;
EString. Exp  ::= String ;
EQConst. Exp1  ::= IdT "::" [IdT] ;
separator IdT "::" ;

ELShift. Exp  ::= Exp "<<" Exp ;
coercions Exp 1 ;

TInt. Type  ::= Integer ;

token Id (letter (letter | digit | '_')*) ;
token IdT (letter (letter | digit | '_')*) ;