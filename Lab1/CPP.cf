PDefs. Program ::= [Def] ;
terminator Def "" ;

comment "//" ;
comment "/*" "*/" ;
comment "#" ;

DFun. Def   ::= Type Id "(" [Arg] ")" Body ;
DFunIn. Def ::= "inline" Type Id "(" [Arg] ")" Body ;
DType. Def  ::= "typedef" Type Id ";" ;
DInit. Def  ::= Type [Id] "=" Exp ";" ;
DDEc. Def   ::= Type [Id] ";" ;
DUsing. Def ::= "using" [Name] ";" ;
DStruc. Def ::= "struct" Id "{" [Decs] "}" ";" ;

separator Arg "," ;
terminator Stm "" ;
terminator Decs ";" ;

Dec. Decs   ::= Type [Id];
EBody. Body ::= ";" ;
FBody. Body ::= "{" [Stm] "}" ;

TArg. Arg   ::= Type ;
IdArg. Arg  ::= Type Id ;
DArg. Arg   ::= Type Id "=" Exp ;
CArg. Arg   ::= "const" Arg ;

SExp. Stm     ::= Exp ";" ;
SDecl. Stm    ::= Type [Id] ";" ;
SInit. Stm    ::= Type [Id] "=" Exp ";" ;
SConst. Stm   ::= "const" Type [Id] "=" Exp ";" ;
SReturn. Stm  ::= "return" Exp ";" ;
SWhile.  Stm  ::= "while" "(" Exp ")" Stm ;
SDo.     Stm  ::= "do" Stm "while" "(" Exp ")" ";" ;
SFor.    Stm  ::= "for" "(" ForInDec ";" Exp ";" Exp ")" Stm ;
SIf.     Stm  ::= "if" "(" Exp ")" Stm Else ;
STypeD.  Stm  ::= "typedef" Type Id ";" ;
SBlock.  Stm  ::= "{" [Stm] "}" ;

separator nonempty Id "," ;
separator Stm "" ;

ForDec. ForInDec ::= 

RElse. Else  ::=  "else" Stm ;
REmpty. Else ::= ;

ELiteral. Exp16 ::= Literal ;
EQConst.  Exp16 ::= [Name] ;
EIndex.   Exp15 ::= Exp15 "[" Exp "]" ;
EFunc.    Exp15 ::= Exp16 "(" [Exp] ")" ;
EDot.     Exp14 ::= Exp14 "." Exp15 ;
EArrow.   Exp14 ::= Exp14 "->" Exp15 ;
EIncR.    Exp14 ::= Exp14 "++" ;
EDecR.    Exp14 ::= Exp14 "--" ;
EIncL.    Exp13 ::= "++" Exp13 ;
EDecL.    Exp13 ::= "--" Exp13 ;
EDefr.    Exp13 ::= "*" Exp13 ;
ENeg.     Exp13 ::= "!" Exp13 ;
EMul.     Exp12 ::= Exp12 "*" Exp13 ;
EDiv.     Exp12 ::= Exp12 "/" Exp13 ;
ERem.     Exp12 ::= Exp12 "%" Exp13 ;
EAdd.     Exp11 ::= Exp11 "+" Exp12 ;
ESub.     Exp11 ::= Exp11 "-" Exp12 ;
ELShift.  Exp10 ::= Exp10 "<<" Exp11 ;
ERShift.  Exp10 ::= Exp10 ">>" Exp11 ;
ELesser.  Exp9  ::= Exp9 "<" Exp9 ;
EGreater. Exp9  ::= Exp9 ">" Exp9 ;
ELesserE. Exp9  ::= Exp9 "<=" Exp9 ;
EGreatE.  Exp9  ::= Exp9 ">=" Exp9 ;
EEquals.  Exp8  ::= Exp8 "==" Exp8 ;
EInEqual. Exp8  ::= Exp8 "!=" Exp8 ;
EConj.    Exp4  ::= Exp4 "&&" Exp5 ;
EDisj.    Exp3  ::= Exp3 "||" Exp4 ;
EAss.     Exp2  ::= Exp3 "=" Exp2 ;
EAddAss.  Exp2  ::= Exp3 "+=" Exp2 ;
ESubAss.  Exp2  ::= Exp3 "-=" Exp2 ;
ECond.    Exp2 	::= Exp3 "?" Exp2 ":" Exp2 ;
EExept.   Exp   ::= "throw" Exp2 ;
coercions Exp 16 ;


separator Exp "," ;
separator nonempty Name "::" ;
IdName.   Name    ::= Id ;
TypeName. Name    ::= Type2 ;

IntL.    Literal ::= Integer ;
StringL. Literal ::= [String] ;
CharL.   Literal ::= Char ;
FloatL.  Literal ::= Double ;
IdentL.  Literal ::= Id ;

separator nonempty String "" ;


TString. Type2    ::= "string" ;
TInt. Type2       ::= "int" ;
TDouble. Type2    ::= "double" ;
TTemplate. Type2  ::= Id "<" TArg ">" ;
TQConst. Type1    ::= [Name] ;
TVoid. Type2      ::= "void" ;
TBool. Type2      ::= Boole ;
TRef.  Type       ::= Type1 "&" ;

coercions Type 2 ;

TArgT. TArg    ::= Type1 ;
TArgM. TArg    ::= Type1 "," Id ;

BTrue. Boole  ::= "true" ;
BFalse. Boole ::= "false" ;

token Id (letter (letter | digit | '_')*) ;
