-- This Happy file was machine-generated by the BNF converter
{
{-# OPTIONS_GHC -fno-warn-incomplete-patterns -fno-warn-overlapping-patterns #-}
module ParFun where
import AbsFun
import LexFun
import ErrM

}

%name pProgram Program
%name pDef Def
%name pListDef ListDef
%name pListIdent ListIdent
%name pExp3 Exp3
%name pExp2 Exp2
%name pExp1 Exp1
%name pExp Exp

-- no lexer declaration
%monad { Err } { thenM } { returnM }
%tokentype { Token }

%token 
 '(' { PT _ (TS _ 1) }
 ')' { PT _ (TS _ 2) }
 '+' { PT _ (TS _ 3) }
 '-' { PT _ (TS _ 4) }
 '->' { PT _ (TS _ 5) }
 ';' { PT _ (TS _ 6) }
 '<' { PT _ (TS _ 7) }
 '=' { PT _ (TS _ 8) }
 '\\' { PT _ (TS _ 9) }
 'else' { PT _ (TS _ 10) }
 'if' { PT _ (TS _ 11) }
 'then' { PT _ (TS _ 12) }

L_ident  { PT _ (TV $$) }
L_integ  { PT _ (TI $$) }
L_err    { _ }


%%

Ident   :: { Ident }   : L_ident  { Ident $1 }
Integer :: { Integer } : L_integ  { (read ( $1)) :: Integer }

Program :: { Program }
Program : ListDef { Prog (reverse $1) } 


Def :: { Def }
Def : Ident ListIdent '=' Exp { DDef $1 (reverse $2) $4 } 


ListDef :: { [Def] }
ListDef : {- empty -} { [] } 
  | ListDef Def ';' { flip (:) $1 $2 }


ListIdent :: { [Ident] }
ListIdent : {- empty -} { [] } 
  | ListIdent Ident { flip (:) $1 $2 }


Exp3 :: { Exp }
Exp3 : Ident { EVar $1 } 
  | Integer { EInt $1 }
  | '(' Exp ')' { $2 }


Exp2 :: { Exp }
Exp2 : Exp2 Exp3 { EApp $1 $2 } 
  | Exp3 { $1 }


Exp1 :: { Exp }
Exp1 : Exp1 '+' Exp2 { EAdd $1 $3 } 
  | Exp1 '-' Exp2 { ESub $1 $3 }
  | Exp1 '<' Exp2 { ELt $1 $3 }
  | Exp2 { $1 }


Exp :: { Exp }
Exp : 'if' Exp1 'then' Exp1 'else' Exp { EIf $2 $4 $6 } 
  | '\\' Ident '->' Exp { EAbs $2 $4 }
  | Exp1 { $1 }



{

returnM :: a -> Err a
returnM = return

thenM :: Err a -> (a -> Err b) -> Err b
thenM = (>>=)

happyError :: [Token] -> Err a
happyError ts =
  Bad $ "syntax error at " ++ tokenPos ts ++ 
  case ts of
    [] -> []
    [Err _] -> " due to lexer error"
    _ -> " before " ++ unwords (map (id . prToken) (take 4 ts))

myLexer = tokens
}

